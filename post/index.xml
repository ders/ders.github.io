<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on awm&#39;s blog</title>
    <link>https://ders.github.io/post/</link>
    <description>Recent content in Posts on awm&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Feb 2016 17:51:00 +0900</lastBuildDate>
    <atom:link href="https://ders.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Grunt to Manage Static Assets</title>
      <link>https://ders.github.io/post/2016-02-03-static-assets-with-grunt/</link>
      <pubDate>Wed, 03 Feb 2016 17:51:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2016-02-03-static-assets-with-grunt/</guid>
      <description>

&lt;p&gt;I &lt;a href=&#34;https://ders.github.io/post/2016-01-14-static-assets-for-websites/&#34;&gt;previously posted&lt;/a&gt; about using GNU Make to manage front-end assets for a website.  A colleague suggested that I should check out &lt;a href=&#34;http://gruntjs.com/getting-started&#34;&gt;Grunt&lt;/a&gt; as it does everything I need to do and more.  So here it is.&lt;/p&gt;

&lt;p&gt;I have the same goals as I did last week:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;concatenate an arbitrary combination of js files, minifying them in the process&lt;/li&gt;
&lt;li&gt;preprocess css with sass&lt;/li&gt;
&lt;li&gt;copy directories i and lib untouched&lt;/li&gt;
&lt;li&gt;run a watch process to update files as they&amp;rsquo;re changed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installing-grunt:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Installing grunt&lt;/h2&gt;

&lt;p&gt;Grunt is part of the &lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt; ecosystem, and as such is available via &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;the node package manager (npm)&lt;/a&gt;.  Npm is available on OS X via Homebrew.&lt;/p&gt;

&lt;h3 id=&#34;basic-npm-concepts:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Basic npm concepts&lt;/h3&gt;

&lt;p&gt;There are a few things that we need to understand about npm.  The biggest headache was recognizing the difference between local and global installs and knowing when to use which.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Npm installs packages into a project (unless the &lt;code&gt;-g&lt;/code&gt; global option is specified, more on that later) and needs to be run in project root.  Packages then go into a subdirectory called &lt;code&gt;node_packages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re in some other directory when running npm, the packages will go into a &lt;code&gt;node_packages&lt;/code&gt; subdirectory there and confuse you.&lt;/li&gt;
&lt;li&gt;Npm expects to see a file called &lt;code&gt;package.json&lt;/code&gt; in the project root directory and complains if it&amp;rsquo;s not there.
&lt;code&gt;package.json&lt;/code&gt; includes a list of packages that the project depends on, and the default &lt;code&gt;npm install&lt;/code&gt; without any parameters installs those packages.&lt;/li&gt;
&lt;li&gt;When installing a package explicitly, there is in an option to add an entry to &lt;code&gt;package.json&lt;/code&gt; so that someone else will be able to use &lt;code&gt;npm install&lt;/code&gt; and get everything.  Note that this is an option and not the default behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;creating-the-package-json-file:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Creating the package.json file&lt;/h3&gt;

&lt;p&gt;According to &lt;a href=&#34;http://gruntjs.com/getting-started#package.json&#34;&gt;the documentation&lt;/a&gt;,
the command to use is &lt;code&gt;npm init&lt;/code&gt;, and it must be run in project root.  Running it starts a dialog on the terminal, asking some mostly irrelevant questions: name (defaults to the name of the project directory), version (defaults to 1.0.0), description, entry point (defaults to index.js), test command, git repository, keywords, author, and license (defaults to ISC).  These questions can be suppressed by using &lt;code&gt;npm init --yes&lt;/code&gt;, which defaults everything.&lt;/p&gt;

&lt;p&gt;Unfortunately, npm will complain if it doesn&amp;rsquo;t see a description, a repository field and a license field.  The defaults only cover the license field, leaving the description blank and the repository field missing altogether.&lt;/p&gt;

&lt;p&gt;The minimum &lt;code&gt;package.json&lt;/code&gt; has &lt;a href=&#34;https://docs.npmjs.com/getting-started/using-a-package.json#requirements&#34;&gt;just a name and a version&lt;/a&gt;.
But since I&amp;rsquo;m &lt;a href=&#34;https://www.bignerdranch.com/blog/a-bit-on-warnings/&#34;&gt;a stickler for getting rid of warnings&lt;/a&gt;, I&amp;rsquo;m going to have to create my own &lt;code&gt;package.json&lt;/code&gt; that includes name, version, description, repository and license.  None of this information is relevant; its only purpose is to make the warnings go away.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;taco&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;xyz&amp;quot;,
  &amp;quot;repository&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;xyz&amp;quot;
  },
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately there&amp;rsquo;s one warning I can&amp;rsquo;t get rid of.  At the time of this writing, &lt;code&gt;npm install grunt&lt;/code&gt; produces this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm WARN deprecated lodash@0.9.2: lodash@&amp;lt;2.0.0 is no longer maintained. Upgrade to lodash@^3.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to &lt;a href=&#34;https://github.com/lodash/lodash/wiki/Changelog#v092&#34;&gt;the changelog for lodash&lt;/a&gt;,
version 0.9.2 was released in 2012, and the current version is 4.0.0.  Even the &amp;ldquo;upgrade to&amp;rdquo; version of 3.0.0 is a year old already.  This is a red flag; how and why are these dependencies not getting maintained?  That said, it appears that &lt;a href=&#34;https://github.com/gruntjs/grunt/issues/1419&#34;&gt;an update is on the way&lt;/a&gt;.  Will have to ignore this warning for now.&lt;/p&gt;

&lt;h3 id=&#34;grunt-plugins:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Grunt plugins&lt;/h3&gt;

&lt;p&gt;Grunt itself is just the overlord; to do any real work we&amp;rsquo;re going to need some plugins.  After a lot of googling, I&amp;rsquo;ve come up with this list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To minify and combine javascript files, we can use &lt;code&gt;grunt-contrib-uglify&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To compile scss into css, we can use &lt;code&gt;grunt-contrib-sass&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To copy directories, we can use &lt;code&gt;grunt-contrib-copy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To delete old files, we can use &lt;code&gt;grunt-contrib-clean&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To watch for changes and recompile, we can use &lt;code&gt;grunt-contrib-watch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these are &lt;a href=&#34;http://gruntjs.com/plugins&#34;&gt;marked as officially maintained&lt;/a&gt;, giving us the warm, fuzzy feeling that everything is going to work.&lt;/p&gt;

&lt;p&gt;We can now install grunt and the plugins.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install grunt grunt-contrib-uglify grunt-contrib-sass grunt-contrib-copy grunt-contrib-clean grunt-contrib-watch --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;grunt-command-line:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Grunt command line&lt;/h3&gt;

&lt;p&gt;There is one more install required if we are to be able to run grunt from the command line.  The package is &lt;code&gt;grunt-cli&lt;/code&gt;, and needs to be installed globally so that the grunt executable goes into /usr/local/bin and is available in the system path.&lt;/p&gt;

&lt;p&gt;npm install grunt-cli -g&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s possible to install &lt;code&gt;grunt-cli&lt;/code&gt; in the project directory, but then the executable will be in node_modules/.bin instead of /usr/local/bin, and that makes more headaches for us&lt;/p&gt;

&lt;p&gt;One gotcha is that the global grunt-cli requires a local grunt or it will fail.  Grunt-cli is a wrapper to find the locally installed grunt to whatever project you&amp;rsquo;re in.  The global grunt-cli will not find a global grunt.&lt;/p&gt;

&lt;h3 id=&#34;summary-of-grunt-installation:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Summary of grunt installation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install npm (e.g. &lt;code&gt;brew install npm&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Create the package.json file shown above.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install grunt grunt-contrib-uglify grunt-contrib-sass grunt-contrib-copy grunt-contrib-clean grunt-contrib-* watch --save-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install grunt-cli -g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; should go into source control, and &lt;code&gt;node_modules&lt;/code&gt; should be excluded from source control with the appropriate entry in &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once we have &lt;code&gt;package.json&lt;/code&gt; as updated by the npm install &amp;ndash;save-dev command, steps 2 and 3 can be replaced by a simple &lt;code&gt;npm install&lt;/code&gt;.  We still need to keep step 4; global packages can&amp;rsquo;t go into &lt;code&gt;package.json&lt;/code&gt; (npm will ignore &lt;code&gt;--save-dev&lt;/code&gt; when &lt;code&gt;-g&lt;/code&gt; is specified).&lt;/p&gt;

&lt;h3 id=&#34;optionally-installing-grunt-cli-locally:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Optionally installing grunt-cli locally&lt;/h3&gt;

&lt;p&gt;Installing &lt;code&gt;grunt-cli&lt;/code&gt; locally instead of globally will allow it to be included in &lt;code&gt;package.json&lt;/code&gt;, but it has the side effect of not having the grunt executable in the path.  A possible workaround to this side effect is to add a script section to &lt;code&gt;package.json&lt;/code&gt; with all the grunts you want to do.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: { &amp;quot;watch&amp;quot;: &amp;quot;grunt watch&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can type &lt;code&gt;npm run watch&lt;/code&gt; instead of &lt;code&gt;grunt watch&lt;/code&gt;.  This may or may not be worth the trouble.&lt;/p&gt;

&lt;h2 id=&#34;writing-a-gruntfile:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Writing a gruntfile&lt;/h2&gt;

&lt;h3 id=&#34;basic-gruntfile-concept:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Basic gruntfile concept&lt;/h3&gt;

&lt;p&gt;The gruntfile is a bit of javascript initialization that gets run whenever grunt is invoked.  The gruntfile needs to define an initialization function and assign that to the global &lt;code&gt;module.exports&lt;/code&gt;.  Within the initialization function, we&amp;rsquo;ll need to list the modules we need (grunt-contrib-uglify, etc.), specify some configuration for each module, define the default task, and optionally define additional tasks.&lt;/p&gt;

&lt;p&gt;Each plugin defines a task of the same name as the plugin (e.g. grunt-contrib-uglify defines an &amp;ldquo;uglify&amp;rdquo; task, under which any number of subtasks may be defined).&lt;/p&gt;

&lt;p&gt;The gruntfile is named &lt;code&gt;Gruntfile.js&lt;/code&gt; and resides in project root.  The basic gruntfile structure is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function(grunt) {
  grunt.initConfig({
    pluginname: { ... }  // one of these for each plugin
  };
  grunt.loadNpmTasks( ... );  // one of these for each plugin
  grunt.registerTask(&#39;default&#39;, ... );  // define the default behavior of `grunt` with no parameters
  grunt.registerTask( ... );  // optional additional tasks
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each plugin defines a task of the same name as the plugin (e.g. grunt-contrib-uglify defines an &amp;ldquo;uglify&amp;rdquo; task, under which any number of subtasks may be defined).  Defining additional tasks is useful for combining tasks into a single command.&lt;/p&gt;

&lt;p&gt;A thorough read of &lt;a href=&#34;http://gruntjs.com/getting-started&#34;&gt;the docs&lt;/a&gt; along with &lt;a href=&#34;https://www.google.co.kr/search?q=gruntfile+examples&#34;&gt;some examples&lt;/a&gt; gives us enough information to build a single gruntfile, giving us the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grunt&lt;/code&gt; does a clean build, deleting &lt;code&gt;pub&lt;/code&gt; if it exists and building everything from &lt;code&gt;src&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grunt build&lt;/code&gt; does an incremental build of js and css files, updating only those files whose source has changed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grunt copy&lt;/code&gt; syncs the directories &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt; from &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;pub&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grunt watch&lt;/code&gt; runs until you kill it, watching for changes in &lt;code&gt;src&lt;/code&gt; and updating &lt;code&gt;pub&lt;/code&gt; as necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;code&gt;grunt&lt;/code&gt; is short for &lt;code&gt;grunt all&lt;/code&gt;, which does &lt;code&gt;grunt clean&lt;/code&gt; + &lt;code&gt;grunt copy&lt;/code&gt; + &lt;code&gt;grunt build&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/ders/3ca946b14641e5efe783.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;observations:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Observations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Overall, the quality of documentation is poor.  I had to resort to copying examples and then modifying them by trial and error until I got the results I wanted.  There are many alternate syntaxes, causing further confusion.&lt;/li&gt;
&lt;li&gt;Could not find a way to do incremental updates with uglify.  The entire js collection is rebuilt whenever any js source file changes.&lt;/li&gt;
&lt;li&gt;The sass plugin depends on having command-line sass installed as a ruby gem, a dependency that I grudgingly accepted when writing the previous makefile and was hoping to avoid.&lt;/li&gt;
&lt;li&gt;Dependencies from &lt;code&gt;@import&lt;/code&gt; statements in scss source files are handled nicely; the dependencies are honored when doing an incremental build and don&amp;rsquo;t need to be included in the gruntfile.  This is nice.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;grunt-contrib-copy&lt;/code&gt; plugin doesn&amp;rsquo;t know how to sync. The &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt; directories are copied in their entireties every time there&amp;rsquo;s a change.  There is &lt;a href=&#34;https://github.com/tomusdrw/grunt-sync&#34;&gt;another plugin&lt;/a&gt; which claims to know how to sync, but I haven&amp;rsquo;t tested it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conclusion:230cd0b47b3fc52b0f70982618b640aa&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This was a whole lot of trouble to set up a relatively simple build system. Grunt is a powerful tool, and I can see the value of using it when you&amp;rsquo;re already in a node-based project, but it to use it as an isolated build tool is not worth the effort.&lt;/p&gt;

&lt;p&gt;The only thing we gained with Grunt is the ability to auto-detect imports in .scss files and do incremental updates accordingly.  At the same time we lost the ability to incremental updates of the Javascript files, at least with the standard plugin.&lt;/p&gt;

&lt;p&gt;I was also hoping to avoid the ruby sass dependency by using the plugin, but no luck there since the plugin is just a wrapper for the command line sass.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static assets for websites</title>
      <link>https://ders.github.io/post/2016-01-14-static-assets-for-websites/</link>
      <pubDate>Thu, 14 Jan 2016 14:22:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2016-01-14-static-assets-for-websites/</guid>
      <description>

&lt;p&gt;Count me in on the developers who believe that &lt;a href=&#34;http://www.gnu.org/software/make/manual/make.html&#34;&gt;GNU make&lt;/a&gt; is the best tool for assembling static assets.&lt;/p&gt;

&lt;h3 id=&#34;the-general-problem:19cc05a9058f195db3905e6197b7999f&#34;&gt;The general problem&lt;/h3&gt;

&lt;p&gt;We need to maintain a set of files B that is derived from another set of files A through some known (and possibly complicated) transformation.  We edit the files in set A but not in set B.  We would like a simple way to (1) create B from A, and (2) update B when A changes, only recreating the parts that are necessary.&lt;/p&gt;

&lt;h3 id=&#34;the-more-specific-problem:19cc05a9058f195db3905e6197b7999f&#34;&gt;The more specific problem&lt;/h3&gt;

&lt;p&gt;B is the set of static assets for a web service, and A is the set of source files used to make them.  Only A will be checked into source control, and only B will be uploaded to the web server.&lt;/p&gt;

&lt;p&gt;There are different kinds of assets in A that need to be treated differently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;My Javascript source files are formatted nicely and full of meaningful, well-thought-out comments.  I would like the js files sent with the web pages to be devoid of comments and mashed together so as to be almost unreadable.  This can be accomplished by piping the files through &lt;a href=&#34;http://www.crockford.com/javascript/jsmin.html&#34;&gt;JSMin&lt;/a&gt; on the way from A to B.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;My Javascript source files are modular, and one page may need several files.  These are best combined into one file for faster loading.  Also, any source file could be included in several combination files.  I would like the ability to have each js file in B created from an arbitrary combination of source files from A.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All my css is written as scss and needs to be processed with an scss compiler such as  &lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt;.  Scss files may import other sccs files, a fact we need to be aware of when detecting changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other assets such as images and precompiled libraries can be copied from A to B without modification.&lt;/p&gt;

&lt;h3 id=&#34;what-to-do:19cc05a9058f195db3905e6197b7999f&#34;&gt;What to do&lt;/h3&gt;

&lt;p&gt;The first thing is to define a directory structure.&lt;/p&gt;

&lt;p&gt;For set A we&amp;rsquo;ll make a subdirectory &lt;code&gt;src&lt;/code&gt; in project root with four subdirectories: &lt;code&gt;js&lt;/code&gt; for Javascript sources, &lt;code&gt;css&lt;/code&gt; for scss sources, &lt;code&gt;i&lt;/code&gt; for image files, and &lt;code&gt;lib&lt;/code&gt; for precompiled libraries.&lt;/p&gt;

&lt;p&gt;For set B we&amp;rsquo;ll make a subdirectory &lt;code&gt;pub&lt;/code&gt; in project root.  Compiled js and css files will go directly in &lt;code&gt;pub&lt;/code&gt;, and the two subdirectories &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt; will mirror &lt;code&gt;src/i&lt;/code&gt; and &lt;code&gt;src/lib&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── src
│   ├── js
│   ├── css
│   ├── i
│   └── lib
└── pub
    ├── i
    └── lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to make a list of the js and css files we would like generated and placed into &lt;code&gt;pub&lt;/code&gt;.  We&amp;rsquo;ll do that by defining variables &lt;code&gt;JSFILES&lt;/code&gt; and &lt;code&gt;CSSFILES&lt;/code&gt;, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;JSFILES := main.js eggs.js pancake.js
CSSFILES := blueberry.css yogurt.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, we need to define the dependencies for each of these files, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub/main.js: src/js/main.js
pub/eggs.js: src/js/eggs.js src/js/milk.js
pub/pancake.js: src/js/milk.js src/js/flour.js src/js/eggs.js

pub/blueberry.css: src/css/blueberry.scss src/css/fruit.scss
pub/yogurt.css: src/css/yogurt.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To simplify things, we&amp;rsquo;ll define the default dependeny to be one source file of the same name, so we can omit dependency definitions for &lt;code&gt;main.js&lt;/code&gt; and &lt;code&gt;yogurt.css&lt;/code&gt;.  We&amp;rsquo;ll also define &lt;code&gt;JS := src/js&lt;/code&gt;, &lt;code&gt;CSS := src/css&lt;/code&gt; and &lt;code&gt;PUB := pub&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(PUB)/eggs.js: $(JS)/eggs.js $(JS)/milk.js
$(PUB)/pancake.js: $(JS)/milk.js $(JS)/flour.js $(JS)/eggs.js
$(PUB)/blueberry.css: $(CSS)/blueberry.scss $(CSS)/fruit.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we need to make a list of directories to be copied directly from &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;pub&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COPYDIRS := lib i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is now enough information for us to build a simple makefile, giving us (at least) the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt; does a clean build, deleting &lt;code&gt;pub&lt;/code&gt; if it exists and building everything from src.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make build&lt;/code&gt; does an incremental build of js and css files, updating only those files whose source has changed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make copy&lt;/code&gt; syncs the directories &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt; from &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;pub&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make watch&lt;/code&gt; runs until you kill it, watching for changes in &lt;code&gt;src&lt;/code&gt; and updating &lt;code&gt;pub&lt;/code&gt; as necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;code&gt;make&lt;/code&gt; is short for &lt;code&gt;make all&lt;/code&gt;, which does &lt;code&gt;make clean&lt;/code&gt; + &lt;code&gt;make copy&lt;/code&gt; + &lt;code&gt;make build&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/ders/627147bf67544c96f8be.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;how-it-works:19cc05a9058f195db3905e6197b7999f&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;The meat of this makefile is in the pattern rules (lines 43-55).  Quick cheat sheet:  &lt;code&gt;$@&lt;/code&gt; = target, &lt;code&gt;$^&lt;/code&gt; = all dependencies, &lt;code&gt;$&amp;lt;&lt;/code&gt; = the first dependency.  &lt;a href=&#34;http://www.gnu.org/software/make/manual/make.html#Automatic-Variables&#34;&gt;Details are here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first rule takes care of &lt;code&gt;main.js&lt;/code&gt; and &lt;code&gt;eggs.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second rule takes care of &lt;code&gt;pancake.js&lt;/code&gt;.  Note that &lt;code&gt;pancake.js&lt;/code&gt; doesn&amp;rsquo;t match the first rule because there is no source file called pancake.&lt;/p&gt;

&lt;p&gt;The third rule takes care of &lt;code&gt;blueberry.css&lt;/code&gt; and &lt;code&gt;yogurt.css&lt;/code&gt;.  Note that on line 55 &lt;code&gt;fruit.scss&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; supplied as an argument to sass.  It&amp;rsquo;s only listed as a dependency because &lt;code&gt;blueberry.scss&lt;/code&gt; contains an &lt;code&gt;@import &amp;quot;sass&amp;quot;;&lt;/code&gt; directive.&lt;/p&gt;

&lt;p&gt;Finally, lines 32-36 take care of syncing directories &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the end, our filesystem looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── src
│   ├── js
│   │   ├── eggs.js
│   │   ├── flour.js
│   │   ├── main.js
│   │   └── milk.js
│   ├── css
│   │   ├── blueberry.scss
│   │   ├── fruit.scss
│   │   └── yogurt.scss
│   ├── i
│   │   ├── hanjan.jpg
│   │   └── ikant.png
│   └── lib
│       └── MooTools-Core-1.5.2-compressed.js
└── pub
│   ├── i
│   │   ├── hanjan.jpg
│   │   └── ikant.png
│   ├── lib
│   │   └── MooTools-Core-1.5.2-compressed.js
│   ├── blueberry.css
│   ├── eggs.js
│   ├── main.js
│   ├── pancake.js
│   └── yogurt.css
└── Makefile
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dependencies:19cc05a9058f195db3905e6197b7999f&#34;&gt;Dependencies&lt;/h3&gt;

&lt;p&gt;This makefile requires &lt;code&gt;jsmin&lt;/code&gt;, &lt;code&gt;sass&lt;/code&gt; and &lt;code&gt;watchman-make&lt;/code&gt; to be available at the command line.&lt;/p&gt;

&lt;p&gt;Jsmin and &lt;a href=&#34;https://facebook.github.io/watchman/docs/install.html&#34;&gt;Watchman&lt;/a&gt; (which includes watchman-make) are available on OS X via Homebrew.  Sass is not (yet), but it can be installed as a system-wide ruby gem.  I&amp;rsquo;m not a fan of requiring rubygems for my decidedly anti-rails build system, but since Sass runs nicely from the command line I&amp;rsquo;ll turn a blind eye for now.&lt;/p&gt;

&lt;p&gt;Jsmin is also &lt;a href=&#34;https://libraries.io/npm/jsmin&#34;&gt;available via npm&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;other-features-i-d-like-to-include:19cc05a9058f195db3905e6197b7999f&#34;&gt;Other features I&amp;rsquo;d like to include&lt;/h3&gt;

&lt;p&gt;Would be nice to automatically detect @import statements in scss source files and generate dependency lists based on that.  I&amp;rsquo;m aware that the Sass package has it&amp;rsquo;s own watcher that handles dependencies, but using that would mean bypassing a significant part of the makefile, thereby making a mess.&lt;/p&gt;

&lt;p&gt;It would be pretty simple to add a &lt;code&gt;make deploy&lt;/code&gt; command to rsync the server.  I&amp;rsquo;ll probably do that later.&lt;/p&gt;

&lt;h3 id=&#34;a-feature-i-excluded-on-purpose:19cc05a9058f195db3905e6197b7999f&#34;&gt;A feature I excluded on purpose&lt;/h3&gt;

&lt;p&gt;Many web frameworks automatically append timestamps or version numbers to static assets in order to defeat browser caching.  This adds a whole lot of complexity for a pretty minor benefit.  Once a site is in production, I expect updates to be few and far between, and I&amp;rsquo;m happy to manually add a version number to a target filename as necessary.&lt;/p&gt;

&lt;h3 id=&#34;credits:19cc05a9058f195db3905e6197b7999f&#34;&gt;Credits&lt;/h3&gt;

&lt;p&gt;This Makefile was heavily influenced by and owes thanks to &lt;a href=&#34;http://west.io/post/2015/04/11-frontend-builds-with-makefiles/&#34;&gt;this blog post&lt;/a&gt;.  Thank you!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Sign-in</title>
      <link>https://ders.github.io/post/2016-01-08-google-signin/</link>
      <pubDate>Fri, 08 Jan 2016 15:50:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2016-01-08-google-signin/</guid>
      <description>

&lt;h2 id=&#34;using-google-sign-in-on-website-x:a9bc523f98a05ffe7a400551ba7208e4&#34;&gt;Using Google Sign-in on Website X&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt;  &lt;a href=&#34;https://developers.google.com/identity/sign-in/web/sign-in&#34;&gt;Read the docs&lt;/a&gt; too.  This post doesn&amp;rsquo;t cover everything.&lt;/p&gt;

&lt;p&gt;A week ago I was completely clueless as to how Google sign-in works.  I set out to write about it and learned a few things.&lt;/p&gt;

&lt;h3 id=&#34;overview:a9bc523f98a05ffe7a400551ba7208e4&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;Using Google sign-in on a website requires first doing the following in the &lt;a href=&#34;https://console.developers.google.com/home/dashboard&#34;&gt;Google developer&amp;rsquo;s console&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creating a project&lt;/li&gt;
&lt;li&gt;creating a sign-in client ID for that project&lt;/li&gt;
&lt;li&gt;associating the domain(s) of the website with the sign-in client ID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sign-in is done using javascript on the web page to talk directly to Google&amp;rsquo;s servers.  The javascript is loaded from Google&amp;rsquo;s servers.  It is not necessary to involve the server for website X at all.&lt;/p&gt;

&lt;p&gt;When Joe the Hacker attempts to sign in to website X, a popup dialog appears.  The contents of the dialog depend on Joe&amp;rsquo;s current signed-in state.&lt;/p&gt;

&lt;p&gt;If Joe is not signed in to Google at all, then a sign-in dialog appears.  If he&amp;rsquo;s signed in to more than one account, then an account chooser dialog appears.  If he&amp;rsquo;s signed into exactly one account, then the sign-in part is skipped.&lt;/p&gt;

&lt;p&gt;If this is the first time he&amp;rsquo;s attempted to sign in to website X, then he&amp;rsquo;ll be asked to give permission for website X to have access to his profile information (name, picture) and email address.&lt;/p&gt;

&lt;p&gt;In the case that Joe needs neither the sign-in dialog nor the permissions dialog (i.e. he&amp;rsquo;s already signed in to exactly one account and is a returning user), then the pop-up closes itself immediately without any user action.&lt;/p&gt;

&lt;p&gt;The browser remembers that Joe is signed in to website X using Google sign-in.  He can sign out of website X and still be signed into Google.  However, if he signs out of Google, then he&amp;rsquo;ll automatically be signed out of website X as well.  He can&amp;rsquo;t be signed in to website X using his Google ID and not also be signed in to Google.&lt;/p&gt;

&lt;p&gt;If the webpage making the sign-in call is served from a domain that has not been registered in the console, then Joe will see a 400 error (redirect_uri_mismatch) and a picture of a broken robot when trying to sign in.  The error page also exposes the email address of the account that the project is made under.&lt;/p&gt;

&lt;h3 id=&#34;javascript-details:a9bc523f98a05ffe7a400551ba7208e4&#34;&gt;Javascript details&lt;/h3&gt;

&lt;p&gt;The file platform.js provides the global Google API object called &lt;code&gt;gapi&lt;/code&gt; and the auth2 module.  The auth2 module must be explicitly loaded into gapi with the &lt;code&gt;gapi.load&lt;/code&gt; method before it&amp;rsquo;s used.  This method provides an optional callback for when/if the module is loaded successfully.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gapi.load(&amp;quot;auth2&amp;quot;, callback);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the module is loaded, it must be initialized with the sign-in client ID (see above).  The client ID may either be provided as &lt;a href=&#34;https://developers.google.com/identity/sign-in/web/reference#gapiauth2initwzxhzdk20paramswzxhzdk21&#34;&gt;an option to the init method&lt;/a&gt; or in &lt;a href=&#34;https://developers.google.com/identity/sign-in/web/sign-in#specify_your_apps_client_id&#34;&gt;a meta tag in the document&lt;/a&gt;.  The init function returns a GoogleAuth object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gauth = gapi.auth2.init(options);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A logical initialization flow would be to have the initialization in the load callback.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gapi.load(&amp;quot;auth2&amp;quot;, function() { gapi.auth2.init(); });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The GoogleAuth object may also be obtained any time after it&amp;rsquo;s initialized using the &lt;a href=&#34;https://developers.google.com/identity/sign-in/web/reference#gapiauth2getauthinstance&#34;&gt;&lt;code&gt;getAuthInstance&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gauth = gapi.auth2.getAuthInstance();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point we can find out whether Joe is or isn&amp;rsquo;t signed in to website X.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (gauth.isSignedIn.get()) { alert(&amp;quot;User is signed in, and I debug with alerts.&amp;quot;); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If he isn&amp;rsquo;t signed in, we can try to sign him in.  This is done with &lt;code&gt;GoogleAuth.signIn&lt;/code&gt;.  In most cases, we should wait for him to click a button (e.g. &amp;ldquo;Sign In with Google&amp;rdquo;) before doing so.  There are &lt;a href=&#34;https://developers.google.com/identity/sign-in/web/reference#googleauthsigninwzxhzdk72optionswzxhzdk73&#34;&gt;a few options&lt;/a&gt; that we can ignore for now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gauth.SignIn(options)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function returns &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;a Promise&lt;/a&gt;, making it easy to do stuff when it finishes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gauth.SignIn().then(function() {
    alert(&amp;quot;We&#39;re in!&amp;quot;);
}, function() {
    alert(&amp;quot;You FAILED!&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also this thing called a GoogleUser object, which we can get after Joe has signed in.  (We can also get it before he&amp;rsquo;s signed in, but it would be useless.)  The GoogleUser object reveals Joe&amp;rsquo;s name, email address and profile picture if he has one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user = gauth.currentUser.get();
profile = user.getBasicProfile();
alert(profile.getName() + &amp;quot; &amp;quot; + profile.getEmail());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, use can use &lt;code&gt;GoogleAuth.signOut&lt;/code&gt; to sign Joe out of website X.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gauth.signOut();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although this signs him out, it doesn&amp;rsquo;t forget about him.  The GoogleUser object is still available and still has his ID.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user = gauth.currentUser.get();
alert(user.getId());
alert(user.isSignedIn());    // false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can sign him in again using the grant method.  This behaves slightly differently from &lt;code&gt;GoogleAuth.signIn&lt;/code&gt; in that it doesn&amp;rsquo;t give Joe a chance to choose a different account.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user.grant();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to the documentation, &lt;code&gt;GoogleUser.signIn&lt;/code&gt; is equivalent to &lt;code&gt;GoogleUser.grant&lt;/code&gt;, but my Firebug tells me that there&amp;rsquo;s in fact no method called signIn on the GoogleUser object.  Bad documentation.&lt;/p&gt;

&lt;h3 id=&#34;what-usually-happens-in-practice:a9bc523f98a05ffe7a400551ba7208e4&#34;&gt;What usually happens in practice&lt;/h3&gt;

&lt;p&gt;Google provides &lt;a href=&#34;https://developers.google.com/identity/sign-in/web/sign-in#add_a_google_sign-in_button&#34;&gt;a handy shortcut&lt;/a&gt; so that anyone can add Google sign-in to their page without knowing any javascript.  As soon as platform.js is loaded, it checks for the existence of a &lt;code&gt;div.g-signin2&lt;/code&gt; (&amp;lt;div class=&amp;ldquo;g-signin2&amp;rdquo;&amp;gt;) and springs into action if found.&lt;/p&gt;

&lt;p&gt;It loads the auth2 module and puts a standard sign-in button in the div (clobbering what was there, watch out), and wires up the button so that when you press it, it logs you in.  It can also call a function of your choosing on sign-in, passing in Joe&amp;rsquo;s GoogleUser object.&lt;/p&gt;

&lt;p&gt;The button appears to be rendered with &lt;a href=&#34;https://developers.google.com/identity/sign-in/web/reference#gapisignin2renderwzxhzdk114idwzxhzdk115_wzxhzdk116optionswzxhzdk117&#34;&gt;&lt;code&gt;gapi.signin2.render&lt;/code&gt;&lt;/a&gt;, and specifying options like this works as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;g-signin2&amp;quot; data-onsuccess=&amp;quot;onSignIn&amp;quot; data-longtitle=&amp;quot;true&amp;quot; data-width=&amp;quot;200&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One caution here is that data-longtitle is a string value that gets cast to a boolean, and, as such, the string &amp;ldquo;false&amp;rdquo; will get cast to true.  The way to make longtitle false is set data-longtitle=&amp;quot;&amp;quot; (or to omit it entirely, as false is the default).&lt;/p&gt;

&lt;h3 id=&#34;involving-the-server-for-website-x:a9bc523f98a05ffe7a400551ba7208e4&#34;&gt;Involving the server for website X&lt;/h3&gt;

&lt;p&gt;Chances are website X will want to know about Joe&amp;rsquo;s sign-in on the server side.  This will require some javascript to send a token to the server, which the server can then decode to get Joe&amp;rsquo;s information.&lt;/p&gt;

&lt;p&gt;The token can be obtained from the GoogleUser object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;token = user.getAuthResponse().id_token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The token is signed to prevent spoofing, and it&amp;rsquo;s up to the server code to &lt;a href=&#34;https://developers.google.com/identity/sign-in/web/backend-auth#verify-the-integrity-of-the-id-token&#34;&gt;verify its integrity&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;scopes:a9bc523f98a05ffe7a400551ba7208e4&#34;&gt;Scopes&lt;/h3&gt;

&lt;p&gt;Scopes are the permissions that we&amp;rsquo;re asking Joe to give to website X.  The default for sign-in is scopes profile and email, and we get Joe&amp;rsquo;s name, email, and picture if available.  &lt;em&gt;(Nerdy detail: the name and picture are not part of any scope; see below.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With the default settings, Joe will see the a request for the following permissions the first time he attempts to sign in to website X:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Know who you are on Google&lt;/li&gt;
&lt;li&gt;View your email address&lt;/li&gt;
&lt;li&gt;View your basic profile info&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If other permissions (e.g. calendar) are needed, they can be added with the &lt;code&gt;scope&lt;/code&gt; option in GoogleAuth.init, the &lt;code&gt;scope&lt;/code&gt; option in GoogleAuth.signIn, or the &lt;code&gt;data-scope&lt;/code&gt; tag on div.g-signin2.  Most scopes are expressed as urls, e.g. &amp;quot;https:&amp;#47;&amp;#47;www.googleapis.com/auth/calendar.readonly&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Here is &lt;a href=&#34;https://developers.google.com/identity/protocols/googlescopes&#34;&gt;a list of all known scopes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;fewer-scopes:a9bc523f98a05ffe7a400551ba7208e4&#34;&gt;Fewer Scopes&lt;/h3&gt;

&lt;p&gt;The default scopes can be turned off with by sending &lt;code&gt;fetch_basic_profile: false&lt;/code&gt; as one of the options to GoogleAuth.init.  (Note that this precludes using the auto magic button.)  In this case, at least one scope must be explicitly specified with the scope parameter.&lt;/p&gt;

&lt;p&gt;The two scopes that are included by default are &lt;code&gt;profile&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt;.  Adding the &lt;code&gt;profile&lt;/code&gt; scope does nothing.  It only provides Joe&amp;rsquo;s 21-digit ID, which we get anyway.  Adding the &lt;code&gt;email&lt;/code&gt; scope gives us Joe&amp;rsquo;s email address, but the only way to get it is to decode &lt;code&gt;id_token&lt;/code&gt;, as &lt;code&gt;GoogleUser.getBasicProfile&lt;/code&gt; only works when &lt;code&gt;fetch_basic_profile&lt;/code&gt; is true.&lt;/p&gt;

&lt;p&gt;Strangely, requesting only the &lt;code&gt;email&lt;/code&gt; scope causes permission requests #1 and #2 to be displayed, even though we only get the email access.  Requesting only the &lt;code&gt;profile&lt;/code&gt; scope causes only #3 to be displayed.  Requesting both &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;profile&lt;/code&gt; displays #2 and #3 but not #1.  I have yet to understand the logic behind this behavior.&lt;/p&gt;

&lt;p&gt;Also strange is the fact that neither the &lt;code&gt;profile&lt;/code&gt; nor &lt;code&gt;email&lt;/code&gt; scope provides Joe&amp;rsquo;s name and picture.  As far as I can tell, the only way to get his name and picture is to stick to the default &lt;code&gt;fetch_basic_profile: true&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Happy new year 11111100000</title>
      <link>https://ders.github.io/post/2016-01-05-happy-new-year-11111100000/</link>
      <pubDate>Tue, 05 Jan 2016 11:45:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2016-01-05-happy-new-year-11111100000/</guid>
      <description>&lt;p&gt;Or, happy new year (2&lt;sup&gt;6−1&lt;/sup&gt;)(2&lt;sup&gt;6&lt;/sup&gt;−1).&lt;/p&gt;

&lt;p&gt;We just wrapped up a long-running big data project.  While I didn&amp;rsquo;t find the
project itself particularly interesting, I learned quite a bit of interesting
stuff doing it.&lt;/p&gt;

&lt;p&gt;On the skills side, I learned &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;,
learned how to navigate AWS,
and gained a good understanding of how cluster data stores work.&lt;/p&gt;

&lt;p&gt;But probably the most important takeaway from last year is summarized
neatly in &lt;a href=&#34;http://widgetsandshit.com/teddziuba/2010/10/taco-bell-programming.html&#34;&gt;this blog post&lt;/a&gt; from 2010, recently sent to me by a coworker.
In a nutshell, there are a lot of big data systems that are far
larger and more complicated than they need to be for the data that
they are designed to process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New blog engine</title>
      <link>https://ders.github.io/post/2015-07-02-new-blog-engine/</link>
      <pubDate>Thu, 02 Jul 2015 11:14:56 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2015-07-02-new-blog-engine/</guid>
      <description>&lt;p&gt;Trying out &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; as a new blog engine.  If you&amp;rsquo;re reading this, then I&amp;rsquo;ve succeeded.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why you should always understand what&#39;s going on under the hood</title>
      <link>https://ders.github.io/post/2014-01-27-why-you-should-always-understand-whats-going-on-under-the-hood/</link>
      <pubDate>Mon, 27 Jan 2014 10:07:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2014-01-27-why-you-should-always-understand-whats-going-on-under-the-hood/</guid>
      <description>

&lt;p&gt;This is about how I got bitten by &lt;a href=&#34;http://datamapper.org/&#34;&gt;DataMapper&lt;/a&gt;.
No infection and I didn&amp;rsquo;t get rabies, but it still hurt.&lt;/p&gt;

&lt;p&gt;I should mention that overall I think DataMapper is pretty good.
It has most of the core features that an ORM should have without unneeded complexity.
It beats the pants off of Active Somethingorother when it comes to making clean, backend-independent models.&lt;/p&gt;

&lt;p&gt;Unfortunately &lt;em&gt;most of the core features&lt;/em&gt; isn&amp;rsquo;t quite &lt;em&gt;all of the core features&lt;/em&gt;, and when you really need that one missing piece, that&amp;rsquo;s when the trouble starts.&lt;/p&gt;

&lt;p&gt;What bit me was the combination of two unrelated things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I needed an atomic update with conditions attached.&lt;/li&gt;
&lt;li&gt;Datamapper has different representations of the Boolean type, even between different SQLs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;the-missing-feature:136baa383e3072f3c5db5b5786002bc4&#34;&gt;The Missing Feature&lt;/h3&gt;

&lt;p&gt;The glaringly missing feature is the ability to update a value and know
whether or not we actually changed anything.&lt;/p&gt;

&lt;p&gt;In SQL this would look like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;quarks&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;seen&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;whosaw&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ders&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;seen&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I would get the number of affected rows to see if a change was made
(i.e. whether or not the quark had already been seen).&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s try it with DataMapper:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Quark&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;all(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:id&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:seen&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:seen&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:whosaw&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ders&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Two problems here.
The first problem is that the return value is always true, and we don&amp;rsquo;t
get to see how many rows were updated.
This isn&amp;rsquo;t too big a deal;
we can work around it by using &lt;code&gt;Quark.first&lt;/code&gt; instead of &lt;code&gt;Quark.all&lt;/code&gt;,
generating an exception if no records are found.&lt;/p&gt;

&lt;p&gt;The second problem is the dealbreaker.
Datamapper insists on generating two separate queries for the single
update statement:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;seen&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;whosaw&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;quarks&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;seen&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;quarks&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;seen&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;whosaw&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ders&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This obviously won&amp;rsquo;t do, as it&amp;rsquo;s not thread-safe.
Two users running this code at the same time would both believe that they saw the quark first.&lt;/p&gt;

&lt;h3 id=&#34;the-solution:136baa383e3072f3c5db5b5786002bc4&#34;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;The solution was to write the update query in SQL.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;da&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;DataMapper&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;repository(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:default&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;adapter&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;da&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;execute(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;UPDATE quarks SET seen=&amp;#39;t&amp;#39;, whosaw=&amp;#39;ders&amp;#39; WHERE id=42 AND seen=&amp;#39;f&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;affected_rows&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
   &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# we saw it first&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Kind of defeats the purpose of having an ORM, but it gets the job done.
And as it turns out, I&amp;rsquo;m
&lt;a href=&#34;http://stackoverflow.com/questions/18650932/how-to-add-a-where-clause-in-update-query-in-datamapper&#34;&gt;not the first one&lt;/a&gt;
to run into this issue.&lt;/p&gt;

&lt;h3 id=&#34;how-i-got-bitten:136baa383e3072f3c5db5b5786002bc4&#34;&gt;How I Got Bitten&lt;/h3&gt;

&lt;p&gt;Little did I know that the internal mapping of a Boolean field varies
between SQL implementations.
For Sqlite and Postgres, it&amp;rsquo;s a character field with &lt;code&gt;&#39;t&#39;&lt;/code&gt; and &lt;code&gt;&#39;f&#39;&lt;/code&gt; values, whereas for MySQL it&amp;rsquo;s the integers 1 and 0.&lt;/p&gt;

&lt;p&gt;In my case the unit tests all passed, but the live server (with a MySQL backend)
started returning 500s.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy enough to change the query to work with MySQL:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;da&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;execute(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;UPDATE quarks SET seen=1, whosaw=&amp;#39;ders&amp;#39; WHERE id=42 AND seen=0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;But then the unit tests fail.&lt;/p&gt;

&lt;p&gt;In the end, I wrote this bit of horrible code to keep the tests passing
and the live server happy.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;t,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;da&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;scheme&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;sqlite&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;#39;t&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;#39;f&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# sqlite&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# mysql&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;da&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;execute(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;UPDATE quarks SET seen=#{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}, whosaw=&amp;#39;ders&amp;#39; WHERE id=42 AND seen=#{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;(There may be a way to extract &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; directly from the
DataMapper internals, but I&amp;rsquo;m not that good yet.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://ders.github.io/post/2014-01-17-try-it/</link>
      <pubDate>Fri, 17 Jan 2014 12:20:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2014-01-17-try-it/</guid>
      <description>&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ python
&amp;gt;&amp;gt;&amp;gt; import this
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just try it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS Locale</title>
      <link>https://ders.github.io/post/2014-01-10-aws-locale/</link>
      <pubDate>Fri, 10 Jan 2014 14:55:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2014-01-10-aws-locale/</guid>
      <description>&lt;p&gt;Every time I start a new EC2 Ubuntu instance, I&amp;rsquo;m confronted with the following
warning when I ssh in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;_____________________________________________________________________
WARNING! Your environment specifies an invalid locale.
 This can affect your user experience significantly, including the
 ability to manage packages. You may install the locales by running:

   sudo apt-get install language-pack-UTF-8
     or
   sudo locale-gen UTF-8

To see all available language packs, run:
   apt-cache search &amp;quot;^language-pack-[a-z][a-z]$&amp;quot;
To disable this message for all users, run:
   sudo touch /var/lib/cloud/instance/locale-check.skip
_____________________________________________________________________
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Furthermore, a variety of package installations fail with some complaint
related to the locale, the default language, or both.
And for some reason the advice to install relevant language packs
is not helpful.&lt;/p&gt;

&lt;p&gt;It turns out that there are some of environment variables
(&lt;code&gt;LANGUAGE&lt;/code&gt;, &lt;code&gt;LC_CTYPE&lt;/code&gt; and &lt;code&gt;LC_ALL&lt;/code&gt; to be specific) that are not
set properly.&lt;/p&gt;

&lt;p&gt;The advice to install language packs assumes that these environment
variables are set to a language that&amp;rsquo;s not installed.  However, in the
case of a new EC2 instance, these variables are not set at all.&lt;/p&gt;

&lt;p&gt;An easy way to get the warnings to go away is to edit the file
&lt;code&gt;/etc/default/locale&lt;/code&gt; so that these variables always get set. I&amp;rsquo;ve found
that the default installation only sets &lt;code&gt;LANG&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;/etc/default/locale
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;LANG=en_US.UTF-8
LANGUAGE=en_US
LC_CTYPE=en_US.UTF-8
LC_ALL=en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;As always, it&amp;rsquo;s also a good idea to make sure you have the latest and
greatest packages:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ sudo apt-get update
$ sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And finally, while we&amp;rsquo;re at it, why not set the timezone?&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ sudo dpkg-reconfigure tzdata
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Next time I need to set up a new EC2 instance,
I&amp;rsquo;ll come read my own blog and know exactly what to do.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Woke up, fell out of bed</title>
      <link>https://ders.github.io/post/2013-12-17-woke-up/</link>
      <pubDate>Tue, 17 Dec 2013 11:06:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2013-12-17-woke-up/</guid>
      <description>&lt;p&gt;Things I learned this year:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby.&lt;/strong&gt; Ruby is an interesting language, but I find that the ability to
open up classes and modify methods on the fly is too easily abused.
Also not a fan of all the alternate method names (e.g. map and collect) &amp;ndash;
would prefer just to choose one and stick with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; and &lt;strong&gt;Github.&lt;/strong&gt; Made crystal clear with SourceTree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rails.&lt;/strong&gt; Learned to hate it. Was going to write a blog post on why I
hate rails, but someone
&lt;a href=&#34;http://kakubei.blogspot.kr/2012/05/why-i-hate-rails.html&#34;&gt;beat me to it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rubygems.&lt;/strong&gt; Learned to hate them too. I&amp;rsquo;ve wasted a stupid amount of
time figuring out that my program is broken because the gems I&amp;rsquo;m using
don&amp;rsquo;t work the way they&amp;rsquo;re supposed to. Better to just write it myself.
(I actually think the gem system is pretty cool, but quality control,
ladies and gentlemen, quality control.)
And if you can do something in two lines of ruby code, you don&amp;rsquo;t need a gem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Mapper.&lt;/strong&gt; I wish this were maintained better. It&amp;rsquo;s a handy tool,
especially when you&amp;rsquo;re dealing with simple, table-friendly data.
It&amp;rsquo;s not so good at complex queries, though, and I think that the lofty goal
of making it compatible with all different kinds of database engines
is hampering its ability to work really well with the most common ones (e.g. SQL).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python.&lt;/strong&gt; Python rocks. My next job will be in a python shop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Django.&lt;/strong&gt; Django rocks along with python. In my next life (when I get
really good at python and am independently wealthy with a lot of free time)
I&amp;rsquo;m going to be a regular contributor to the django project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unfuddle&lt;/strong&gt; and &lt;strong&gt;Pivotal Tracker.&lt;/strong&gt; Say what? What is there to learn there?
In fact there&amp;rsquo;s a lot to learn if you&amp;rsquo;ve never used an issue tracking system before.
I find the Unfuddle UI to be kind of clunky, especially if you&amp;rsquo;re dealing
with a large number of tickets, but it&amp;rsquo;s much more thorough than Pivotal
Tracker in keeping track of comments, ticket disposition, change history,
and so on.
Maybe some clever person will invent a PT-style front end for Unfuddle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heroku.&lt;/strong&gt; Five stars.
The first time I attempted a heroku deployment, it was all black magic and I was lost.
Now it&amp;rsquo;s still black magic, but I&amp;rsquo;ve learned that I can use it.
Deployment is one of those things that gets more and more complicated the more you try to understand it.
Heroku allows you to remain ignorant and just have your program run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android.&lt;/strong&gt; On my desktop I have a 2200-page book on how to code for Android.
I&amp;rsquo;m going to tell you I&amp;rsquo;ve read it all. I&amp;rsquo;ll be lying, and you won&amp;rsquo;t believe me.
In reality, I&amp;rsquo;ve learned the basics and can make a simple app.
I&amp;rsquo;m still at the tedious stage where I have to look everything up, and Android programming is already tedious by nature, but I&amp;rsquo;m getting it done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon AWS.&lt;/strong&gt; This probably has the steepest learning curve of all.
The documentation is complete and thorough and is also written to an
audience of Sysadmin Ph.Ds.
So far I&amp;rsquo;ve learned to use S3 buckets and create EC2 instances.&lt;/p&gt;

&lt;p&gt;Things I want to learn next year:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;advanced Python&lt;/li&gt;
&lt;li&gt;advanced Django&lt;/li&gt;
&lt;li&gt;advanced Git&lt;/li&gt;
&lt;li&gt;Neo4j&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Sass&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;backbone.js&lt;/li&gt;
&lt;li&gt;how to deploy stuff (why is this so hard, anyway?)&lt;/li&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Which train is that?</title>
      <link>https://ders.github.io/post/2013-05-02-which-train-is-that/</link>
      <pubDate>Thu, 02 May 2013 10:03:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2013-05-02-which-train-is-that/</guid>
      <description>&lt;p&gt;Straight out of college, I went on a summer backpacking trip to Europe.
Well, it wasn&amp;rsquo;t exactly a backpacking trip, as (1) my bag wasn&amp;rsquo;t a backpack, and (2) I actually spent two months in one place attending a language program, but that&amp;rsquo;s another story.&lt;/p&gt;

&lt;p&gt;My ticket back home was out of London&amp;rsquo;s Heathrow airport, and since I was in Bavaria at the time, I had a major train + ferry + train journey just to get my flight.
I had the journey carefully researched and perfectly timed so that I&amp;rsquo;d be on the ferry just as my rail pass expired.
The journey, though long, was largely without incident, but something that happened on the tube from Liverpool Street to Heathrow left a lasting impression.&lt;/p&gt;

&lt;p&gt;I had figured out in advance which train I needed to catch. I&amp;rsquo;ll guess now that it was the Circle Line to South Kensingon, changing to the Piccadilly Line.
I followed all the signs carefully and got myself to the correct platform.
I noticed that there were other lines operating on the same track, so I had to make sure that I got on the correct train.&lt;/p&gt;

&lt;p&gt;Within a couple of minutes, a train arrived.  I looked to see whether or not it was a Circle Line train, but wait.
There was no marking whatsoever.  No Circle Line, no Metropolitan Line, nothing.
And yet, busy Londoners were getting on and off, some were waiting for a different train, and they all obviously knew something about this mystery train that I didn&amp;rsquo;t &amp;ndash;
namely what line it was running.&lt;/p&gt;

&lt;p&gt;I finally asked a woman who was standing nearby if she could tell me what train this was.  Predictably, she looked at me as if I were an idiot.
She was silent for a few seconds, and then without moving her head she glanced slightly upward and answered me.  &amp;ldquo;Metropolitan.&amp;rdquo;  End of conversation.&lt;/p&gt;

&lt;p&gt;You see, in New York, the line number/letter and destination are clearly visible on the outside of every subway car.
In fact, everywhere I&amp;rsquo;d travelled, every bus, subway, and tram  was labeled in this fasion.
In New York at the time, looking at the train itself was the &lt;em&gt;only&lt;/em&gt; way to know if it was the train you wanted; fancy platform displays were as of yet a thing of the future.  It had simply never occurred to me that there was another way.&lt;/p&gt;

&lt;p&gt;The train information signs in the London tube station were large enough to read easily but also small enough to miss completely if you didn&amp;rsquo;t know they were there.
Had I gone to London with this one simple bit of information &amp;ndash; that there is train information displayed above the platform &amp;ndash; I could have saved myself this small embarrassment and the possibility of getting on the wrong train.&lt;/p&gt;

&lt;p&gt;This, my friends, is an exact parallel of what&amp;rsquo;s happening in my workplace nowadays.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>More Data Mapper</title>
      <link>https://ders.github.io/post/2013-04-16-more-data-mapper/</link>
      <pubDate>Tue, 16 Apr 2013 14:05:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2013-04-16-more-data-mapper/</guid>
      <description>&lt;p&gt;One of the basic functions of &lt;a href=&#34;http://datamapper.org/&#34;&gt;Data Mapper&lt;/a&gt; is to remember which attributes in the model have been modified so that it&amp;rsquo;s easy to determine what (if anything) needs to be updated in the database.
Data Mapper checks automatically on a call to &lt;a href=&#34;http://rubydoc.info/github/datamapper/dm-core/master/DataMapper/Resource#save-instance_method&#34;&gt;&lt;code&gt;#save&lt;/code&gt;&lt;/a&gt; and only writes what needs to be written.
It also provides methods &lt;a href=&#34;http://rubydoc.info/github/datamapper/dm-core/master/DataMapper/Resource#dirty%3F-instance_method&#34;&gt;&lt;code&gt;#dirty?&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://rubydoc.info/github/datamapper/dm-core/master/DataMapper/Resource#attribute_dirty%3F-instance_method&#34;&gt;&lt;code&gt;#attribute_dirty?&lt;/code&gt;&lt;/a&gt;, which tell you whether or not a record or a particular attribute has changed.&lt;/p&gt;

&lt;p&gt;Unfortunately, while it&amp;rsquo;s easy to find out whether or not an attribute has changed, there is no easy way to see what the old value was.
It&amp;rsquo;s obviously keeping the old value somewhere.  We know this because when you change an attribute back to the old value, it recognizes that you&amp;rsquo;ve done so and considers it unchanged.&lt;/p&gt;

&lt;p&gt;There is a method called &lt;a href=&#34;http://rubydoc.info/github/datamapper/dm-core/master/DataMapper/Resource#dirty_attributes-instance_method&#34;&gt;&lt;code&gt;#dirty_attributes&lt;/code&gt;&lt;/a&gt;, which returns a hash of changed attributes, but the keys to this hash are hashes themselves and in a format that&amp;rsquo;s used only internally in Data Mapper, making it a needlessly inconvenient method to use.
Also, I&amp;rsquo;d like to avoid &lt;code&gt;#dirty_attributes&lt;/code&gt; as it&amp;rsquo;s not part of the public API.&lt;/p&gt;

&lt;p&gt;There is a possible workaround, suggested by some.  Override the setter for the attribute and save the old value for later use.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;thing&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(newthing)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;@oldthing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@thing&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;@thing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;newthing&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;rsquo;m not going to link to the people who suggested this, though, because it&amp;rsquo;s a terrible suggestion.  Since we&amp;rsquo;ve overridden Data Mapper&amp;rsquo;s setter for attribute &lt;code&gt;thing&lt;/code&gt;, Data Mapper no longer knows that we&amp;rsquo;ve changed its value.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p392&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;001&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Record&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p392&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;002&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;record&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;thing&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;teamaker&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p392&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;003&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;record&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;thing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;coffeemaker&amp;quot;&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;coffeemaker&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p392&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;004&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;record&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;attribute_dirty?(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:thing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Imagine the insidious bugs that could creep in here.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p392&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;005&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;record&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;save&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p392&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;006&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Record&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p392&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;003&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;record&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;thing&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;teamaker&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Simply put, our changes are silently ignored because we&amp;rsquo;ve stupidly disabled what is arguably Data Mapper&amp;rsquo;s most important function.&lt;/p&gt;

&lt;p&gt;Fortunately, there is a correct way to do this.  Instead of setting the attributes directly, we set them using Data Mapper&amp;rsquo;s &lt;a href=&#34;http://rubydoc.info/github/datamapper/dm-core/master/DataMapper/Resource#attribute_set-instance_method&#34;&gt;&lt;code&gt;#attribute_set&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;thing&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(newthing)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;@oldthing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;@thing&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;attribute_set(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:thing&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;newthing)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Method &lt;code&gt;#attribute_set&lt;/code&gt; keeps track of the changes.  It&amp;rsquo;s what &lt;code&gt;thing=&lt;/code&gt; pointed to before we overrode it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Mapper</title>
      <link>https://ders.github.io/post/2013-04-16-data-mapper/</link>
      <pubDate>Tue, 16 Apr 2013 12:19:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2013-04-16-data-mapper/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working on a project with &lt;a href=&#34;http://www.padrinorb.com/&#34;&gt;Padrino&lt;/a&gt; and &lt;a href=&#34;http://datamapper.org&#34;&gt;Data Mapper&lt;/a&gt;.
So far I&amp;rsquo;m quite a fan of the Data Mapper way of doing things.&lt;/p&gt;

&lt;p&gt;Unfortunately, I&amp;rsquo;m schooled in the old way &amp;ndash; ugly messes of &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;JOIN&lt;/code&gt; and &lt;code&gt;ORDER BY&lt;/code&gt;,
intelligible only by SQL gurus and dependent not just on SQL but on a particular variety of such, which in my case would be MySQL.&lt;/p&gt;

&lt;p&gt;I label this as unfortunate because my concept of database (e.g. MySQL) heavily influences how I organize the code I write.
I often find myself with a &amp;ldquo;How do you do this in DataMapper?&amp;rdquo; kind of question, where &lt;em&gt;this&lt;/em&gt; is something that I know how to do the old way.
After all, DataMapper is generating SQL queries from the models I write, so if it&amp;rsquo;s easy in SQL, shouldn&amp;rsquo;t it also be easy in DataMapper?&lt;/p&gt;

&lt;p&gt;(Side note: DataMapper doesn&amp;rsquo;t &lt;em&gt;necessarily&lt;/em&gt; generate SQL, but in my current project the backend is SQL and I see the generated queries on the debugging console.)&lt;/p&gt;

&lt;p&gt;Recently I&amp;rsquo;ve a question of this sort that I haven&amp;rsquo;t been able to solve.&lt;/p&gt;

&lt;p&gt;I have a model with an ordering field, which we&amp;rsquo;ll call &lt;code&gt;position&lt;/code&gt;.  I want to sort by this field (ascending), except that I want all the zeroes to be at the end.  In addition, I&amp;rsquo;d like the all the records with &lt;code&gt;position=0&lt;/code&gt; sorted by &lt;code&gt;id&lt;/code&gt; descending.&lt;/p&gt;

&lt;p&gt;In MySQL, I would write:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;things&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;`=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;DESC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Free donuts to the first person who can make a DataMapper version of this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails for Zombies</title>
      <link>https://ders.github.io/post/2013-03-21-rails-for-zombies/</link>
      <pubDate>Thu, 21 Mar 2013 12:19:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2013-03-21-rails-for-zombies/</guid>
      <description>&lt;p&gt;I got introduced today to &lt;a href=&#34;http://railsforzombies.org&#34;&gt;an excellent Ruby on Rails tutorial&lt;/a&gt; with an entertaining zombie theme.  It covered a lot of the basic concepts, many of which I&amp;rsquo;d skipped over in my haste to dive into a real-live project.&lt;/p&gt;

&lt;p&gt;Being who I am, I noticed a couple of inconsistencies between the tutorial videos and the exercises.  Actually, this only applies to the level 5 video; the rest seemed to be fine.&lt;/p&gt;

&lt;p&gt;In the level 5 video at 2:10, the following match example is given:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;new_tweet&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Tweets#new&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the uppercase T on Tweets.  This T is uppercase throughout the video.&lt;/p&gt;

&lt;p&gt;However, when I tried to do the second exercise for this level, the following answer was rejected:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;undead&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Zombies#undead&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The hints told me to do this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;undead&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;zombies#undead&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with a lower case z, which was accepted.  Now I&amp;rsquo;m confused.  Do we need a capital letter here or not?&lt;/p&gt;

&lt;p&gt;In the same video at 3:30, the following match example is given:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;redirect(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Note that there is no leading slash on &amp;lsquo;all&amp;rsquo;; this format is consistent throughout the video.&lt;/p&gt;

&lt;p&gt;However, when I tried to do the third exercise, the following answer was rejected:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;undead&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;redirect(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/zombies&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This time the hints told me to do this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/undead&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;redirect(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/zombies&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Again, I&amp;rsquo;m confused. Do we need (or even want) a leading slash here?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Good Tools</title>
      <link>https://ders.github.io/post/2013-03-15-good-tools/</link>
      <pubDate>Fri, 15 Mar 2013 16:59:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2013-03-15-good-tools/</guid>
      <description>

&lt;p&gt;Here are some some tools that I like.&lt;/p&gt;

&lt;h2 id=&#34;rerun:641fb2fef50bdd606c86780f8eb06737&#34;&gt;Rerun&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Rerun launches your program, then watches the filesystem. If a relevant file changes, then it restarts your program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had some trouble getting Shotgun configured probably, and I found &lt;a href=&#34;https://github.com/alexch/rerun&#34;&gt;Rerun&lt;/a&gt; to be a simple alternative.  I like it because it can be used for any process you want, not just restarting your web server.&lt;/p&gt;

&lt;h2 id=&#34;gitk:641fb2fef50bdd606c86780f8eb06737&#34;&gt;Gitk&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gitk.sourceforge.net/&#34;&gt;Gitk&lt;/a&gt; is a graphical interface for Git.  It shows your entire development tree graphically, great for those of us less fluent in pushes and pulls.  It does a lot of other things too that I don&amp;rsquo;t know about.&lt;/p&gt;

&lt;p&gt;Debian-based systems can enjoy Gitk with a simple &lt;code&gt;sudo apt-get install gitk&lt;/code&gt;.  Then issue a &lt;code&gt;gitk --all&lt;/code&gt; to see everything.&lt;/p&gt;

&lt;h2 id=&#34;irb:641fb2fef50bdd606c86780f8eb06737&#34;&gt;Irb&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ruby-doc.org/docs/ProgrammingRuby/html/irb.html&#34;&gt;Irb&lt;/a&gt; is the Ruby console.  I should actually generalize this and include all consoles.  One of the most valuable checks while coding is to paste snippets of code into the console and see that they do what you think they&amp;rsquo;re doing.&lt;/p&gt;

&lt;p&gt;Make an &lt;code&gt;.irbrc&lt;/code&gt; startup file for a richer experience.  Rails users can get a the console with the full Rails evnironment with &lt;code&gt;rails c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is &lt;a href=&#34;http://samuelmullen.com/2012/07/getting-more-out-of-the-rails-console/&#34;&gt;an excellent blog post&lt;/a&gt; on the topic.&lt;/p&gt;

&lt;h2 id=&#34;awesome-print:641fb2fef50bdd606c86780f8eb06737&#34;&gt;Awesome Print&lt;/h2&gt;

&lt;p&gt;A great companion to the Ruby console is &lt;a href=&#34;https://github.com/michaeldv/awesome_print&#34;&gt;Awesome Print&lt;/a&gt;, a Ruby gem which lets you pretty up the output of array, hashes, and the like while in the console.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p392&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;001&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hong Gildong&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:age&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:interests&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hong Gildong&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:age&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:interests&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p392&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;002&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ap&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #e6db74&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hong Gildong&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;:age&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;:interests&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;sass:641fb2fef50bdd606c86780f8eb06737&#34;&gt;Sass&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Sass makes css fun again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt; is a nifty program that adds some badly-needed css functionality, such as variables, nesting and inheritance.  But the really nifty thing is how it&amp;rsquo;s accomplished.&lt;/p&gt;

&lt;p&gt;You make a &lt;code&gt;.scss&lt;/code&gt; file and Sass converts it to an equivalent &lt;code&gt;.css&lt;/code&gt; that any browser, even IE, can understand.  Sass even has a stealth mode, where it will regenerate the css when your scss is updated.&lt;/p&gt;

&lt;p&gt;Sass is packaged as a Ruby gem, but you&amp;rsquo;re not limited to using it on Ruby projects, since in the end all you need on your server (obviously) are the css files it generates locally.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s likely that a lot of Sass&amp;rsquo;s functionality will eventually become standard css.  But for now, we&amp;rsquo;ve got Sass.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validating data with Mongoid</title>
      <link>https://ders.github.io/post/2013-02-26-validataing-data-with-mongoid/</link>
      <pubDate>Tue, 26 Feb 2013 15:57:00 +0900</pubDate>
      
      <guid>https://ders.github.io/post/2013-02-26-validataing-data-with-mongoid/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working with &lt;a href=&#34;http://mongoid.org/en/mongoid/&#34;&gt;Mongoid&lt;/a&gt;, which is an object-document-mapper for &lt;a href=&#34;http://mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; written in Ruby.&lt;/p&gt;

&lt;p&gt;Mongo organizes data into collections of documents, just as relational databases such as SQL organize data into tables of records.  Reading and writing of
documents is done via named classes, one for each collection.&lt;/p&gt;

&lt;p&gt;The named class for each collection includes &lt;code&gt;Mongoid::Document&lt;/code&gt; to get the database interface methods such as &lt;code&gt;.where&lt;/code&gt;, &lt;code&gt;.new&lt;/code&gt;, and &lt;code&gt;.save&lt;/code&gt;. It also defines the data fields and any custom data handlers.&lt;/p&gt;

&lt;p&gt;One very useful feature is the availability of automatic validators which check the format and integrity of your data before allowing it to be saved.  There&amp;rsquo;s a myriad of options, and they are &lt;a href=&#34;http://mongoid.org/en/mongoid/docs/validation.html&#34;&gt;not very well explained&lt;/a&gt; in the documentation.&lt;/p&gt;

&lt;p&gt;Since the data validators are shared with &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveModel.html&#34;&gt;Active Model&lt;/a&gt;, I decided to look for some help there and found &lt;a href=&#34;http://apidock.com/rails/ActiveModel/Validations/ClassMethods/validates&#34;&gt;this pretty good description&lt;/a&gt; of what kind of validation could be done.
Unfortunately, it wasn&amp;rsquo;t clear anywhere how to actually use the validators once they&amp;rsquo;re defined.&lt;/p&gt;

&lt;p&gt;After a bit of hair-pulling, I discovered it&amp;rsquo;s actually quite simple.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s define a minimal class &lt;code&gt;Iqscore&lt;/code&gt;.  (The name of the collection will be &lt;code&gt;iqscores&lt;/code&gt;; this is a weird behavior of Mongoid whereby class names must be singular and Mongoid will pluralize them for you when naming the collection.)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;mongoid&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Iqscore&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Mongoid&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Document&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;field&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:kid&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:type&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;field&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:iq&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color: #e6db74&#34;&gt;:type&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Integer&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;validates&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:kid&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:presence&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:uniqueness&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;validates&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:iq&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:numericality&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mongoid provides a &lt;code&gt;valid?&lt;/code&gt; method on Iqscore objects.  Valid? tells us whether or not the criteria in the &lt;code&gt;validates&lt;/code&gt; declarations are met.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1.9.3p385 :008 &amp;gt; x = Iqscore.new({kid: &amp;quot;George&amp;quot;, iq: 70})
 =&amp;gt; #&amp;lt;Iqscore _id: 512c72d5352420234d000003, kid: &amp;quot;George&amp;quot;, iq: 70&amp;gt;
1.9.3p385 :009 &amp;gt; x.valid?
 =&amp;gt; true
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1.9.3p385 :010 &amp;gt; y = Iqscore.new({kid: &amp;quot;Bill&amp;quot;, iq: &amp;quot;unknown&amp;quot;})
 =&amp;gt; #&amp;lt;Iqscore _id: 512c736e352420234d000004, kid: &amp;quot;Bill&amp;quot;, iq: 0&amp;gt;
1.9.3p385 :011 &amp;gt; y.valid?
 =&amp;gt; false
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If it doesn&amp;rsquo;t validate, we can see what&amp;rsquo;s wrong by looking at the &lt;code&gt;errors&lt;/code&gt; property.  In this case it tells us that &lt;code&gt;iq&lt;/code&gt; is not a number (and it should be).  Note that the message &amp;ldquo;is not a number&amp;rdquo; is in an array, as it&amp;rsquo;s possible for there to be multiple messages for a single field.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1.9.3p385 :012 &amp;gt; y.errors
 =&amp;gt; #&amp;lt;ActiveModel::Errors:0x98a31cc @base=#&amp;lt;Iqscore _id: 512c736e352420234d000004, kid: &amp;quot;Bill&amp;quot;, iq: 0&amp;gt;, @messages={:iq=&amp;gt;[&amp;quot;is not a number&amp;quot;]}&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;valid?&lt;/code&gt; method is called automatically before any save operation (e.g. &lt;code&gt;save&lt;/code&gt; or &lt;code&gt;create&lt;/code&gt;), and if it returns false, then the save is not done.  Both &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt; return true or false to indicate whether the save was done or not.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1.9.3p385 :013 &amp;gt; x.save
 =&amp;gt; true
1.9.3p385 :014 &amp;gt; y.save
 =&amp;gt; false
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;At this point George is in our database, but Bill isn&amp;rsquo;t.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>